{
  "name": "AsyncRaTT",
  "scopeName": "source.ar",
  "fileTypes": ["ar"],
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#characters" },
    { "include": "#extensions" },
    { "include": "#bindings" },
    { "include": "#operators" },
    { "include": "#keywords" },
    { "include": "#literals" },
    { "include": "#types" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "directives": {
      "patterns": [
        {
          "comment": "line number directive",
          "begin": "^[[:space:]]*(#)[[:space:]]*([[:digit:]]+)",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "constant.numeric.decimal.integer" }
          },
          "contentName": "comment.line.directive"
        },
        {
          "comment": "toplevel directives",
          "patterns": [
            {
              "comment": "general, loading codes",
              "begin": "^[[:space:]]*(#)[[:space:]]*(help|quit|cd|directory|remove_directory|load_rec|load|use|mod_use)",
              "end": "$",
              "beginCaptures": {
                "1": { "name": "keyword.other" },
                "2": { "name": "keyword.other" }
              },
              "patterns": [{ "include": "#strings" }]
            },
            {
              "comment": "environment queries",
              "begin": "^[[:space:]]*(#)[[:space:]]*(show_class_type|show_class|show_exception|show_module_type|show_module|show_type|show_val|show)",
              "end": "$",
              "beginCaptures": {
                "1": { "name": "keyword.other" },
                "2": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#types" },
                { "include": "#identifiers" }
              ]
            },
            {
              "comment": "pretty-printing, tracing",
              "begin": "^[[:space:]]*(#)[[:space:]]*(install_printer|print_depth|print_length|remove_printer|trace|untrace_all|untrace)",
              "end": "$",
              "beginCaptures": {
                "1": { "name": "keyword.other" },
                "2": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#literals" },
                { "include": "#identifiers" }
              ]
            },
            {
              "comment": "compiler options",
              "begin": "^[[:space:]]*(#)[[:space:]]*(labels|ppx|principal|rectypes|warn_error|warnings)",
              "end": "$",
              "beginCaptures": {
                "1": { "name": "keyword.other" },
                "2": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#strings" },
                { "include": "#literals" }
              ]
            }
          ]
        },
        {
          "comment": "topfind directives",
          "begin": "^[[:space:]]*(#)[[:space:]]*(require|list|camlp4o|camlp4r|predicates|thread)",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" }
          },
          "patterns": [{ "include": "#strings" }]
        },
        {
          "comment": "cppo directives",
          "begin": "^[[:space:]]*(#)[[:space:]]*(define|undef|ifdef|ifndef|if|else|elif|endif|include|warning|error|ext|endext)",
          "end": "$",
          "beginCaptures": {
            "1": { "name": "keyword.other" },
            "2": { "name": "keyword.other" }
          },
          "patterns": [
            { "name": "keyword.other", "match": "\\b(defined)\\b" },
            { "name": "keyword.other", "match": "\\\\" },
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#characters" },
            { "include": "#keywords" },
            { "include": "#operators" },
            { "include": "#literals" },
            { "include": "#types" },
            { "include": "#identifiers" }
          ]
        }
      ]
    },

    "comments": {
      "patterns": [
        {
          "name": "comment",
          "match": "//.*\\n"
        }
      ]
    },

    "strings-in-comments": {
      "patterns": [
        {
          "comment": "char literal",
          "match": "'(\\\\)?.'"
        },
        {
          "comment": "string literal",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "match": "\\\\\\\\" }, { "match": "\\\\\"" }]
        },
        {
          "comment": "quoted string literal",
          "begin": "\\{[[:lower:]_]*\\|",
          "end": "\\|[[:lower:]_]*\\}"
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "comment": "quoted string literal",
          "name": "string.quoted.braced",
          "begin": "\\{(%%?[[:alpha:]_][[:word:]']*(\\.[[:alpha:]_][[:word:]']*)*[[:space:]]*)?[[:lower:]_]*\\|",
          "end": "\\|[[:lower:]_]*\\}",
          "beginCaptures": {
            "1": { "name": "keyword.other.extension" }
          }
        },
        {
          "comment": "string literal",
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "comment": "escaped newline",
              "name": "constant.character.escape",
              "match": "\\\\$"
            },
            {
              "comment": "escaped backslash",
              "name": "constant.character.escape",
              "match": "\\\\\\\\"
            },
            {
              "comment": "escaped quote or whitespace",
              "name": "constant.character.escape",
              "match": "\\\\[\"'ntbr ]"
            },
            {
              "comment": "character from decimal ASCII code",
              "name": "constant.character.escape",
              "match": "\\\\[[:digit:]]{3}"
            },
            {
              "comment": "character from hexadecimal ASCII code",
              "name": "constant.character.escape",
              "match": "\\\\x[[:xdigit:]]{2}"
            },
            {
              "comment": "character from octal ASCII code",
              "name": "constant.character.escape",
              "match": "\\\\o[0-3][0-7]{2}"
            },
            {
              "comment": "unicode character escape sequence",
              "name": "constant.character.escape",
              "match": "\\\\u\\{[[:xdigit:]]{1,6}\\}"
            },
            {
              "comment": "printf format string",
              "name": "constant.character.printf",
              "match": "%[-0+ #]*([[:digit:]]+|\\*)?(.([[:digit:]]+|\\*))?[lLn]?[diunlLNxXosScCfFeEgGhHBbat!%@,]"
            },
            {
              "comment": "unknown escape sequence",
              "name": "invalid.illegal.unknown-escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    },

    "characters": {
      "patterns": [
        {
          "comment": "character literal from escaped backslash",
          "name": "string.quoted.single",
          "match": "'(\\\\\\\\)'",
          "captures": { "1": { "name": "constant.character.escape" } }
        },
        {
          "comment": "character literal from escaped quote or whitespace",
          "name": "string.quoted.single",
          "match": "'(\\\\[\"'ntbr ])'",
          "captures": { "1": { "name": "constant.character.escape" } }
        },
        {
          "comment": "character literal from decimal ASCII code",
          "name": "string.quoted.single",
          "match": "'(\\\\[[:digit:]]{3})'",
          "captures": { "1": { "name": "constant.character.escape" } }
        },
        {
          "comment": "character literal from hexadecimal ASCII code",
          "name": "string.quoted.single",
          "match": "'(\\\\x[[:xdigit:]]{2})'",
          "captures": { "1": { "name": "constant.character.escape" } }
        },
        {
          "comment": "character literal from octal ASCII code",
          "name": "string.quoted.single",
          "match": "'(\\\\o[0-3][0-7]{2})'",
          "captures": { "1": { "name": "constant.character.escape" } }
        },
        {
          "comment": "character literal from unknown escape sequence",
          "name": "string.quoted.single",
          "match": "'(\\\\.)'",
          "captures": {
            "1": { "name": "invalid.illegal.unknown-escape" }
          }
        },
        {
          "comment": "character literal",
          "name": "string.quoted.single",
          "match": "'.'"
        }
      ]
    },

    "attributes": {
      "begin": "\\[(@|@@|@@@)[[:space:]]*([[:alpha:]_]+(\\.[[:word:]']+)*)",
      "end": "\\]",
      "beginCaptures": {
        "1": { "name": "keyword.operator.attribute" },
        "2": {
          "name": "keyword.other.attribute",
          "patterns": [
            {
              "name": "keyword.other punctuation.other.period punctuation.separator.period",
              "match": "\\."
            }
          ]
        }
      },
      "patterns": [{ "include": "$self" }]
    },

    "extensions": {
      "begin": "\\[(%|%%)[[:space:]]*([[:alpha:]_]+(\\.[[:word:]']+)*)",
      "end": "\\]",
      "beginCaptures": {
        "1": { "name": "keyword.operator.extension" },
        "2": {
          "name": "keyword.other.extension",
          "patterns": [
            {
              "name": "keyword.other punctuation.other.period punctuation.separator.period",
              "match": "\\."
            }
          ]
        }
      },
      "patterns": [{ "include": "$self" }]
    },

    "modules": {
      "patterns": [
        {
          "begin": "\\b(sig)\\b",
          "end": "\\b(end)\\b",
          "beginCaptures": [{ "name": "keyword.other" }],
          "endCaptures": [{ "name": "keyword.other" }],
          "patterns": [{ "include": "source.interface" }]
        },
        {
          "begin": "\\b(struct)\\b",
          "end": "\\b(end)\\b",
          "beginCaptures": [{ "name": "keyword.other" }],
          "endCaptures": [{ "name": "keyword.other" }],
          "patterns": [{ "include": "$self" }]
        }
      ]
    },

    "bindings": {
      "patterns": [
        {
          "comment": "for loop",
          "match": "\\b(for)[[:space:]]+([[:lower:]_][[:word:]']*)",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "entity.name.function.binding" }
          }
        },
        {
          "comment": "local open/exception/module",
          "match": "\\b(let)[[:space:]]+(open|exception|module)\\b(?!')",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "keyword" }
          }
        },
        {
          "comment": "let expression",
          "match": "\\b(let)[[:space:]]+(?!lazy\\b(?!'))(rec[[:space:]]+)?(?!rec\\b(?!'))([[:lower:]_][[:word:]']*)(?![[:word:]'])[[:space:]]*(?!,|::|[[:space:]])",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "keyword" },
            "3": { "name": "entity.name.function.binding" }
          }
        },
        {
          "comment": "using binding operators",
          "match": "\\b(let|and)([$&*+\\-/=>@^|<][!?$&*+\\-/=>@^|%:]*)[[:space:]]*(?!lazy\\b(?!'))([[:lower:]_][[:word:]']*)(?![[:word:]'])[[:space:]]*(?!,|::|[[:space:]])",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "name": "keyword" },
            "3": { "name": "entity.name.function.binding" }
          }
        },
        {
          "comment": "first class module packing",
          "match": "\\([[:space:]]*(val)[[:space:]]+([[:lower:]_][[:word:]']*)",
          "captures": {
            "1": { "name": "keyword" },
            "2": { "patterns": [{ "include": "$self" }] }
          }
        },
        {
          "comment": "locally abstract types",
          "match": "(?:\\(|(:))[[:space:]]*(type)((?:[[:space:]]+[[:lower:]_][[:word:]']*)+)",
          "captures": {
            "1": {
              "name": "keyword.other punctuation.other.colon punctuation.colon"
            },
            "2": { "name": "keyword" },
            "3": { "name": "entity.name.function.binding" }
          }
        },
        {
          "comment": "optional labeled argument with type",
          "begin": "(\\?)\\([[:space:]]*([[:lower:]_][[:word:]']*)",
          "beginCaptures": {
            "1": { "name": "variable.parameter.optional" },
            "2": { "name": "variable.parameter.optional" }
          },
          "end": "\\)",
          "patterns": [{ "include": "$self" }]
        },
        {
          "comment": "labeled argument with type",
          "begin": "(~)\\([[:space:]]*([[:lower:]_][[:word:]']*)",
          "beginCaptures": {
            "1": { "name": "variable.parameter.labeled" },
            "2": { "name": "variable.parameter.labeled" }
          },
          "end": "\\)",
          "patterns": [{ "include": "$self" }]
        },
        { "include": "source.interface#bindings" }
      ]
    },

    "operators": {
      "patterns": [
        {
          "comment": "binding operator",
          "name": "keyword",
          "match": "\\b(let|and)[$&*+\\-/=>@^|<][!?$&*+\\-/=>@^|%:]*"
        },
        {
          "comment": "infix symbol",
          "name": "keyword.operator",
          "match": "[$&*+\\-/=>@^%<][~!?$&*+\\-/=>@^|%<:.]*"
        },
        {
          "comment": "infix symbol that begins with vertical bar",
          "name": "keyword.operator",
          "match": "\\|[~!?$&*+\\-/=>@^|%<:.]+"
        },
        {
          "comment": "vertical bar",
          "name": "keyword.other",
          "match": "(?<!\\[)(\\|)(?!\\])"
        },
        {
          "comment": "infix symbol",
          "name": "keyword.operator",
          "match": "#[~!?$&*+\\-/=>@^|%<:.]+"
        },
        {
          "comment": "prefix symbol",
          "name": "keyword.operator",
          "match": "![~!?$&*+\\-/=>@^|%<:.]*"
        },
        {
          "comment": "prefix symbol",
          "name": "keyword.operator",
          "match": "[?~][~!?$&*+\\-/=>@^|%<:.]+"
        },
        {
          "comment": "type annotation",
          "name": "keyword.other punctuation.other.colon punctuation.colon",
          "match": ":"
        },
        {
          "comment": "semicolon separator",
          "name": "keyword.other punctuation.separator.terminator punctuation.separator.semicolon",
          "match": ";"
        },
        {
          "comment": "comma separator",
          "name": "keyword.other punctuation.comma punctuation.separator.comma",
          "match": ","
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "comment": "reserved asyncratt keyword",
          "name": "keyword.other",
          "match": "\\b(adv|box|unbox|select|never|delay|else|\\\\|if|in|let|match|of|rec|then|type|with|wait|read)\\b(?!')"
        }
      ]
    },

    "literals": {
      "patterns": [
        {
          "comment": "boolean literal",
          "name": "constant.language.boolean",
          "match": "\\b(true|false)\\b"
        },

        {
          "comment": "floating point decimal literal with exponent",
          "name": "constant.numeric.decimal.float",
          "match": "\\b([[:digit:]][[:digit:]_]*(\\.[[:digit:]_]*)?[eE][+-]?[[:digit:]][[:digit:]_]*[g-zG-Z]?)\\b"
        },
        {
          "comment": "floating point decimal literal",
          "name": "constant.numeric.decimal.float",
          "match": "\\b([[:digit:]][[:digit:]_]*)(\\.[[:digit:]_]*[g-zG-Z]?\\b|\\.)"
        },
        {
          "comment": "floating point hexadecimal literal with exponent part",
          "name": "constant.numeric.hexadecimal.float",
          "match": "\\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*(\\.[[:xdigit:]_]*)?[pP][+-]?[[:digit:]][[:digit:]_]*[g-zG-Z]?)\\b"
        },
        {
          "comment": "floating point hexadecimal literal",
          "name": "constant.numeric.hexadecimal.float",
          "match": "\\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*)(\\.[[:xdigit:]_]*[g-zG-Z]?\\b|\\.)"
        },

        {
          "comment": "decimal integer literal",
          "name": "constant.numeric.decimal.integer",
          "match": "\\b([[:digit:]][[:digit:]_]*[lLng-zG-Z]?)\\b"
        },
        {
          "comment": "hexadecimal integer literal",
          "name": "constant.numeric.hexadecimal.integer",
          "match": "\\b((0x|0X)[[:xdigit:]][[:xdigit:]_]*[lLng-zG-Z]?)\\b"
        },
        {
          "comment": "octal integer literal",
          "name": "constant.numeric.octal.integer",
          "match": "\\b((0o|0O)[0-7][0-7_]*[lLng-zG-Z]?)\\b"
        },

        {
          "comment": "binary integer literal",
          "name": "constant.numeric.binary.integer",
          "match": "\\b((0b|0B)[0-1][0-1_]*[lLng-zG-Z]?)\\b"
        },

        {
          "comment": "unit literal",
          "name": "constant.language.unit",
          "match": "\\(\\)"
        },
        {
          "comment": "parentheses",
          "begin": "\\(",
          "end": "\\)",
          "patterns": [{ "include": "$self" }]
        },

        {
          "comment": "empty array",
          "name": "constant.language.array",
          "match": "\\[\\|\\|\\]"
        },
        {
          "comment": "array",
          "begin": "\\[\\|",
          "end": "\\|\\]",
          "patterns": [{ "include": "$self" }]
        },

        {
          "comment": "empty list",
          "name": "constant.language.list",
          "match": "\\[\\]"
        },
        {
          "comment": "list",
          "begin": "\\[",
          "end": "]",
          "patterns": [{ "include": "$self" }]
        },
        {
          "comment": "braces",
          "begin": "\\{",
          "end": "\\}",
          "patterns": [{ "include": "$self" }]
        }
      ]
    },

    "types": {
      "patterns": [
        {
          "comment": "type parameter",
          "name": "storage.type",
          "match": "'[[:alpha:]][[:word:]']*\\b|'_\\b"
        },
        {
          "comment": "weak type parameter",
          "name": "storage.type.weak",
          "match": "'_[[:alpha:]][[:word:]']*\\b"
        },
        {
          "comment": "builtin type",
          "name": "support.type",
          "match": "\\b(unit|bool|int|later|boxed|signal|int32|int64|nativeint|float|char|bytes|string)\\b"
        }
      ]
    },

    "identifiers": {
      "patterns": [
        {
          "comment": "wildcard underscore",
          "name": "constant.language",
          "match": "\\b_\\b"
        },
        {
          "comment": "capital identifier for constructor, exception, or module",
          "name": "constant.language.capital-identifier",
          "match": "\\b[[:upper:]][[:word:]']*('|\\b)"
        },
        {
          "comment": "lowercase identifier",
          "name": "source",
          "match": "\\b[[:lower:]_][[:word:]']*('|\\b)"
        },
        {
          "comment": "polymorphic variant tag",
          "name": "constant.language.polymorphic-variant",
          "match": "\\`[[:alpha:]][[:word:]']*\\b"
        },
        {
          "comment": "empty list (can be used as a constructor)",
          "name": "constant.language.list",
          "match": "\\[\\]"
        }
      ]
    }
  }
}
